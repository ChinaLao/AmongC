// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

    const moo = require("moo");

    const lexer = moo.compile({
    
        

        //special characters
        arith_oper: [
            "+"," +","+ "," + ",
            "-"," -","- "," - ",
            "*"," *","* "," * ",
            "/"," /","/ "," / ",
            "%"," %","% "," % ",
            "**"," **","** "," ** ",
            "//"," //","// "," // ",
        ],
        relation_oper: [
            ">"," >","> "," > ",
            "<"," <","< "," < ",
            "=="," ==","== "," == ",
            "!="," !=","!= "," != ",
            ">="," >=",">= "," >= ",
            "<="," <=","<= "," <= ",
        ],
        assign_oper: [
            "="," =","= "," = ",
            "+="," +=","+= "," += ",
            "-="," -=","-= "," -= ",
            "*="," *=","*= "," *= ",
            "/="," /=","/= "," /= ",
            "**="," **=","**= "," **= ",
            "//*"," //*","//* "," //* ",
            "*="," *=","*= "," *= ",
        ], 
        
        not: ["!"],
        equal: ["="," =","= "," = "],
        unary_oper: ["++","++ ","--","-- "],
        open_paran: ["("," (","( "," ( "],
        close_paran: [")"," )",") "," ) "],
        open_bracket: ["["," [","[ "," [ "],
        close_bracket: ["]"," ]","] "," ] "],
        open_brace: ["{"," {","{ "," { "],
        close_brace: ["}", "}","} "," } "],
        terminator: [";"], //end of statement
        comma: [","," ,",", "," , "],
        dot: ["."],
        colon: [":"," :",": "," : "],
        semicolon:[";","; "], //for for loop
        space: [" ", "\t"],
        //  \": /^[\\"]$/,
        
        //unit keywords
        IN: "IN", 
        OUT: "OUT",
        int: "int ",
        dec: "dec ",
        struct: "struct ",
        str: "str ",
        bool: "bool ",
        empty: "empty ",
        shoot: "shoot",
        scan: "scan",
        if: "if",
        else: "else",
        elf: "elf",
        switch: "switch",
        vote: "vote ",
        default: "default",
        for: "for",
        while: "while",
        do: "do",
        kill: "kill",
        continue: "continue",
        bool_literal: "true",
        return: "return",
        vital: "vital ",
        task: "task ",
        clean: "clean",
        logical_oper: ["and","or"],

        //multicharacter construct

        str_literal: [/[\\"].+[\\"]?/],
        comment: [/[#].+/],
        dec_literal: [/[0-9]+[.][0-9]+/],
        int_literal: [/[0-9]+/],
        id: [/[a-z][a-zA-Z0-9]*/], 
    }); 
var grammar = {
    Lexer: lexer,
    ParserRules: [
    {"name": "program", "symbols": ["global", (lexer.has("space") ? {type: "space"} : space), (lexer.has("IN") ? {type: "IN"} : IN), (lexer.has("space") ? {type: "space"} : space), "main_statement", (lexer.has("space") ? {type: "space"} : space), (lexer.has("OUT") ? {type: "OUT"} : OUT), (lexer.has("space") ? {type: "space"} : space), "function"]},
    {"name": "global", "symbols": ["global_choice", "global"]},
    {"name": "global", "symbols": ["comment", "global"]},
    {"name": "global", "symbols": []},
    {"name": "global_choice", "symbols": ["vital_define"]},
    {"name": "global_choice", "symbols": ["data_declare"]},
    {"name": "global_choice", "symbols": ["struct_declare"]},
    {"name": "data_type", "symbols": [(lexer.has("int") ? {type: "int"} : int)]},
    {"name": "data_type", "symbols": [(lexer.has("dec") ? {type: "dec"} : dec)]},
    {"name": "data_type", "symbols": [(lexer.has("str") ? {type: "str"} : str)]},
    {"name": "data_type", "symbols": [(lexer.has("bool") ? {type: "bool"} : bool)]},
    {"name": "function_data_type", "symbols": ["data_type"]},
    {"name": "function_data_type", "symbols": [(lexer.has("empty") ? {type: "empty"} : empty)]},
    {"name": "literal", "symbols": [(lexer.has("int_literal") ? {type: "int_literal"} : int_literal)]},
    {"name": "literal", "symbols": [(lexer.has("dec_literal") ? {type: "dec_literal"} : dec_literal)]},
    {"name": "literal", "symbols": [(lexer.has("str_literal") ? {type: "str_literal"} : str_literal)]},
    {"name": "literal", "symbols": [(lexer.has("bool_literal") ? {type: "bool_literal"} : bool_literal)]},
    {"name": "vital_define", "symbols": [(lexer.has("vital") ? {type: "vital"} : vital), "data_type", (lexer.has("id") ? {type: "id"} : id), (lexer.has("equal") ? {type: "equal"} : equal), "literal", "recur_vital", (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "recur_vital", "symbols": [(lexer.has("comma") ? {type: "comma"} : comma), (lexer.has("id") ? {type: "id"} : id), (lexer.has("equal") ? {type: "equal"} : equal), "literal"]},
    {"name": "recur_vital", "symbols": []},
    {"name": "declare_choice", "symbols": ["variable"]},
    {"name": "declare_choice", "symbols": ["array"]},
    {"name": "declare_choice", "symbols": ["struct_define"]},
    {"name": "declare_choice", "symbols": []},
    {"name": "recur_assign", "symbols": [(lexer.has("equal") ? {type: "equal"} : equal), (lexer.has("id") ? {type: "id"} : id), "assign_choice", "recur_assign"]},
    {"name": "recur_assign", "symbols": []},
    {"name": "assign_choice", "symbols": ["recur_assign", (lexer.has("equal") ? {type: "equal"} : equal), "variable_choice"]},
    {"name": "assign_choice", "symbols": ["assign_array", "recur_assign", (lexer.has("equal") ? {type: "equal"} : equal), "variable_choice"]},
    {"name": "assign_choice", "symbols": ["assign_struct", "recur_assign", (lexer.has("equal") ? {type: "equal"} : equal), "variable_choice"]},
    {"name": "data_declare", "symbols": ["data_type", (lexer.has("id") ? {type: "id"} : id), "declare_choice", (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "assign_statement", "symbols": [(lexer.has("id") ? {type: "id"} : id), "assign_choice", (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "variable_array", "symbols": ["assign_array"]},
    {"name": "variable_array", "symbols": []},
    {"name": "variable_choice", "symbols": [(lexer.has("id") ? {type: "id"} : id), "variable_array"]},
    {"name": "variable_choice", "symbols": ["literal"]},
    {"name": "variable_choice", "symbols": ["function_statement"]},
    {"name": "variable_choice", "symbols": ["struct_statement"]},
    {"name": "variable_choice", "symbols": ["compute_choice"]},
    {"name": "variable_choice", "symbols": ["condition"]},
    {"name": "variable", "symbols": [(lexer.has("equal") ? {type: "equal"} : equal), "variable_choice", "recur_variable"]},
    {"name": "variable", "symbols": ["recur_variable"]},
    {"name": "variable", "symbols": []},
    {"name": "recur_variable", "symbols": [(lexer.has("comma") ? {type: "comma"} : comma), (lexer.has("id") ? {type: "id"} : id), "variable"]},
    {"name": "recur_variable", "symbols": []},
    {"name": "array_size", "symbols": ["struct_size"]},
    {"name": "array_size", "symbols": ["struct_statement"]},
    {"name": "struct_size", "symbols": [(lexer.has("id") ? {type: "id"} : id)]},
    {"name": "struct_size", "symbols": [(lexer.has("int_literal") ? {type: "int_literal"} : int_literal)]},
    {"name": "struct_size", "symbols": ["function_statement"]},
    {"name": "struct_size", "symbols": ["compute_choice"]},
    {"name": "assign_struct_2D", "symbols": [(lexer.has("open_bracket") ? {type: "open_bracket"} : open_bracket), "struct_size", (lexer.has("close_bracket") ? {type: "close_bracket"} : close_bracket)]},
    {"name": "assign_struct_2D", "symbols": []},
    {"name": "assign_struct_size", "symbols": [(lexer.has("open_bracket") ? {type: "open_bracket"} : open_bracket), "struct_size", (lexer.has("close_bracket") ? {type: "close_bracket"} : close_bracket), "assign_struct_2D"]},
    {"name": "assign_array_2D", "symbols": [(lexer.has("open_bracket") ? {type: "open_bracket"} : open_bracket), "array_size", (lexer.has("close_bracket") ? {type: "close_bracket"} : close_bracket)]},
    {"name": "assign_array_2D", "symbols": []},
    {"name": "assign_array", "symbols": [(lexer.has("open_bracket") ? {type: "open_bracket"} : open_bracket), "array_size", (lexer.has("close_bracket") ? {type: "close_bracket"} : close_bracket), "assign_array_2D"]},
    {"name": "array", "symbols": [(lexer.has("open_bracket") ? {type: "open_bracket"} : open_bracket), "array_size", (lexer.has("close_bracket") ? {type: "close_bracket"} : close_bracket), "array_define_first"]},
    {"name": "array_define_first", "symbols": [(lexer.has("equal") ? {type: "equal"} : equal), (lexer.has("open_brace") ? {type: "open_brace"} : open_brace), "literal", "additional_literal_1D", (lexer.has("close_brace") ? {type: "close_brace"} : close_brace)]},
    {"name": "array_define_first", "symbols": [(lexer.has("open_bracket") ? {type: "open_bracket"} : open_bracket), "array_size", (lexer.has("close_bracket") ? {type: "close_bracket"} : close_bracket), "array_define_second"]},
    {"name": "array_define_first", "symbols": []},
    {"name": "array_define_second", "symbols": [(lexer.has("equal") ? {type: "equal"} : equal), (lexer.has("open_brace") ? {type: "open_brace"} : open_brace), (lexer.has("open_brace") ? {type: "open_brace"} : open_brace), "literal", (lexer.has("comma") ? {type: "comma"} : comma), "additional_literal_1D", (lexer.has("close_brace") ? {type: "close_brace"} : close_brace), "additional_literal_2D"]},
    {"name": "array_define_second", "symbols": []},
    {"name": "additional_literal_1D", "symbols": [(lexer.has("comma") ? {type: "comma"} : comma), "literal", "additional_literal_1D"]},
    {"name": "additional_literal_1D", "symbols": []},
    {"name": "additional_literal_2D", "symbols": [(lexer.has("comma") ? {type: "comma"} : comma), (lexer.has("open_brace") ? {type: "open_brace"} : open_brace), "literal", (lexer.has("comma") ? {type: "comma"} : comma), "additional_literal_1D", (lexer.has("close_brace") ? {type: "close_brace"} : close_brace), "additional_literal_2D"]},
    {"name": "additional_literal_2D", "symbols": []},
    {"name": "main_statement", "symbols": ["statement_choice", "main_statement"]},
    {"name": "main_statement", "symbols": ["comment", "main_statement"]},
    {"name": "main_statement", "symbols": []},
    {"name": "statement", "symbols": ["statement_choice", (lexer.has("open_brace") ? {type: "open_brace"} : open_brace), "function_statement", (lexer.has("close_brace") ? {type: "close_brace"} : close_brace)]},
    {"name": "function_statement", "symbols": ["statement_choice", "function_statement"]},
    {"name": "function_statement", "symbols": ["function_statement"]},
    {"name": "statement_choice", "symbols": ["data_declare"]},
    {"name": "statement_choice", "symbols": ["assign_statement"]},
    {"name": "statement_choice", "symbols": ["out_statement"]},
    {"name": "statement_choice", "symbols": ["in_statement"]},
    {"name": "statement_choice", "symbols": ["loop_statement"]},
    {"name": "statement_choice", "symbols": ["if_statement"]},
    {"name": "statement_choice", "symbols": ["switch_statement"]},
    {"name": "statement_choice", "symbols": ["iterate_statement", (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "statement_choice", "symbols": ["return_statement"]},
    {"name": "statement_choice", "symbols": ["function_statement", (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "statement_choice", "symbols": ["control_statement"]},
    {"name": "statement_choice", "symbols": [(lexer.has("clean") ? {type: "clean"} : clean), (lexer.has("open_paran") ? {type: "open_paran"} : open_paran), (lexer.has("close_paran") ? {type: "close_paran"} : close_paran), (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "control_statement", "symbols": [(lexer.has("continue") ? {type: "continue"} : continue), (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "control_statement", "symbols": [(lexer.has("kill") ? {type: "kill"} : kill), (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "control_statement", "symbols": []},
    {"name": "out_statement", "symbols": [(lexer.has("shoot") ? {type: "shoot"} : shoot), (lexer.has("open_paran") ? {type: "open_paran"} : open_paran), "output", (lexer.has("close_paran") ? {type: "close_paran"} : close_paran), (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "output", "symbols": ["variable_choice", "recur_output"]},
    {"name": "recur_output", "symbols": [(lexer.has("comma") ? {type: "comma"} : comma), "output"]},
    {"name": "recur_output", "symbols": []},
    {"name": "in_statement", "symbols": [(lexer.has("scan") ? {type: "scan"} : scan), (lexer.has("open_paran") ? {type: "open_paran"} : open_paran), (lexer.has("id") ? {type: "id"} : id), "recur_id", (lexer.has("close_paran") ? {type: "close_paran"} : close_paran), (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "recur_id", "symbols": ["assign_array", "id_choice"]},
    {"name": "recur_id", "symbols": [(lexer.has("comma") ? {type: "comma"} : comma), (lexer.has("id") ? {type: "id"} : id), "recur_id"]},
    {"name": "recur_id", "symbols": []},
    {"name": "id_choice", "symbols": [(lexer.has("dot") ? {type: "dot"} : dot), (lexer.has("id") ? {type: "id"} : id), "assign_array"]},
    {"name": "id_choice", "symbols": []},
    {"name": "digit_choice", "symbols": [(lexer.has("int_literal") ? {type: "int_literal"} : int_literal)]},
    {"name": "digit_choice", "symbols": [(lexer.has("dec_literal") ? {type: "dec_literal"} : dec_literal)]},
    {"name": "compute_choice", "symbols": ["digit_choice", (lexer.has("arith_oper") ? {type: "arith_oper"} : arith_oper), "compute_choice", "recur_compute"]},
    {"name": "compute_choice", "symbols": [(lexer.has("open_paran") ? {type: "open_paran"} : open_paran), "digit_choice", "additional_compute", (lexer.has("close_paran") ? {type: "close_paran"} : close_paran), "recur_compute"]},
    {"name": "compute_choice", "symbols": ["compute"]},
    {"name": "compute", "symbols": ["digit_choice"]},
    {"name": "recur_compute", "symbols": ["additional_compute"]},
    {"name": "recur_compute", "symbols": []},
    {"name": "additional_compute", "symbols": [(lexer.has("arith_oper") ? {type: "arith_oper"} : arith_oper), "digit_choice", "recur_compute"]},
    {"name": "additional_compute", "symbols": ["extra_compute"]},
    {"name": "extra_compute", "symbols": [(lexer.has("arith_oper") ? {type: "arith_oper"} : arith_oper), "compute_choice"]},
    {"name": "condition_choice", "symbols": [(lexer.has("id") ? {type: "id"} : id)]},
    {"name": "condition_choice", "symbols": ["literal"]},
    {"name": "condition_choice", "symbols": ["compute_choice"]},
    {"name": "oper_choice", "symbols": [(lexer.has("relation_oper") ? {type: "relation_oper"} : relation_oper)]},
    {"name": "oper_choice", "symbols": [(lexer.has("logical_oper") ? {type: "logical_oper"} : logical_oper)]},
    {"name": "condition", "symbols": ["condition_choice", "oper_choice", "condition", "recur_condition"]},
    {"name": "condition", "symbols": [(lexer.has("not") ? {type: "not"} : not), (lexer.has("open_paran") ? {type: "open_paran"} : open_paran), "condition_choice", "additional_condition", (lexer.has("close_paran") ? {type: "close_paran"} : close_paran), "recur_condition"]},
    {"name": "condition", "symbols": ["condition_choice"]},
    {"name": "recur_condition", "symbols": ["additional_condition"]},
    {"name": "recur_condition", "symbols": []},
    {"name": "additional_condition", "symbols": ["oper_choice", "condition_choice", "recur_condition"]},
    {"name": "additional_condition", "symbols": ["extra_condition"]},
    {"name": "extra_condition", "symbols": ["oper_choice", "condition"]},
    {"name": "for_int", "symbols": [(lexer.has("int") ? {type: "int"} : int)]},
    {"name": "for_int", "symbols": []},
    {"name": "for_initial", "symbols": ["for_int", (lexer.has("id") ? {type: "id"} : id), (lexer.has("equal") ? {type: "equal"} : equal), "for_initial_extra"]},
    {"name": "for_initial", "symbols": []},
    {"name": "for_initial_extra", "symbols": ["array_size", "oper"]},
    {"name": "iterate_choice", "symbols": [(lexer.has("int_literal") ? {type: "int_literal"} : int_literal)]},
    {"name": "iterate_choice", "symbols": [(lexer.has("dec_literal") ? {type: "dec_literal"} : dec_literal)]},
    {"name": "iterate_choice", "symbols": [(lexer.has("str_literal") ? {type: "str_literal"} : str_literal)]},
    {"name": "iterate_choice", "symbols": ["function_statement"]},
    {"name": "iterate_choice", "symbols": ["struct_statement"]},
    {"name": "iterate_statement", "symbols": [(lexer.has("id") ? {type: "id"} : id), "unary"]},
    {"name": "iterate_statement", "symbols": ["unary", (lexer.has("id") ? {type: "id"} : id)]},
    {"name": "iterate_statement", "symbols": [(lexer.has("id") ? {type: "id"} : id), (lexer.has("assign_oper") ? {type: "assign_oper"} : assign_oper), "iterate_choice"]},
    {"name": "iterate_statement", "symbols": []},
    {"name": "recur_for_condition", "symbols": [(lexer.has("logical_oper") ? {type: "logical_oper"} : logical_oper), "for_condition"]},
    {"name": "recur_for_condition", "symbols": []},
    {"name": "for_condition", "symbols": [(lexer.has("id") ? {type: "id"} : id), "oper_choice", "array_size", "recur_for_condition"]},
    {"name": "for_condition", "symbols": []},
    {"name": "loop_statement", "symbols": [(lexer.has("for") ? {type: "for"} : for), (lexer.has("open_paran") ? {type: "open_paran"} : open_paran), "for_initial", (lexer.has("semicolon") ? {type: "semicolon"} : semicolon), "for_condition", (lexer.has("semicolon") ? {type: "semicolon"} : semicolon), "iterate_statement", (lexer.has("close_paran") ? {type: "close_paran"} : close_paran), "statement"]},
    {"name": "loop_statement", "symbols": [(lexer.has("while") ? {type: "while"} : while), (lexer.has("open_paran") ? {type: "open_paran"} : open_paran), "condition", (lexer.has("close_paran") ? {type: "close_paran"} : close_paran), "statement"]},
    {"name": "loop_statement", "symbols": [(lexer.has("do") ? {type: "do"} : do), "statement", (lexer.has("while") ? {type: "while"} : while), (lexer.has("open_paran") ? {type: "open_paran"} : open_paran), "condition", (lexer.has("close_paran") ? {type: "close_paran"} : close_paran), (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "if_statement", "symbols": [(lexer.has("if") ? {type: "if"} : if), (lexer.has("open_paran") ? {type: "open_paran"} : open_paran), "condition", (lexer.has("close_paran") ? {type: "close_paran"} : close_paran), "statement", "else_choice"]},
    {"name": "else_choice", "symbols": [(lexer.has("elf") ? {type: "elf"} : elf), (lexer.has("open_paran") ? {type: "open_paran"} : open_paran), "condition", (lexer.has("close_paran") ? {type: "close_paran"} : close_paran), "statement", "else_choice"]},
    {"name": "else_choice", "symbols": [(lexer.has("else") ? {type: "else"} : else), "statement"]},
    {"name": "else_choice", "symbols": []},
    {"name": "switch_statement", "symbols": [(lexer.has("switch") ? {type: "switch"} : switch), (lexer.has("open_paran") ? {type: "open_paran"} : open_paran), (lexer.has("id") ? {type: "id"} : id), (lexer.has("close_paran") ? {type: "close_paran"} : close_paran), (lexer.has("open_brace") ? {type: "open_brace"} : open_brace), (lexer.has("vote") ? {type: "vote"} : vote), "vote_choice", (lexer.has("colon") ? {type: "colon"} : colon), "statement", (lexer.has("kill") ? {type: "kill"} : kill), (lexer.has("terminator") ? {type: "terminator"} : terminator), "vote", (lexer.has("default") ? {type: "default"} : default), (lexer.has("colon") ? {type: "colon"} : colon), "statement", (lexer.has("close_brace") ? {type: "close_brace"} : close_brace)]},
    {"name": "vote_choice", "symbols": [(lexer.has("int_literal") ? {type: "int_literal"} : int_literal)]},
    {"name": "vote_choice", "symbols": [(lexer.has("str_literal") ? {type: "str_literal"} : str_literal)]},
    {"name": "vote", "symbols": [(lexer.has("vote") ? {type: "vote"} : vote), "vote_choice", (lexer.has("colon") ? {type: "colon"} : colon), "statement", (lexer.has("kill") ? {type: "kill"} : kill), (lexer.has("terminator") ? {type: "terminator"} : terminator), "vote"]},
    {"name": "vote", "symbols": []},
    {"name": "return_statement", "symbols": [(lexer.has("return") ? {type: "return"} : return), "return_choice", (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "return_choice", "symbols": ["variable_choice"]},
    {"name": "return_choice", "symbols": [(lexer.has("id") ? {type: "id"} : id)]},
    {"name": "return_choice", "symbols": []},
    {"name": "struct_declare", "symbols": [(lexer.has("struct") ? {type: "struct"} : struct), (lexer.has("id") ? {type: "id"} : id), (lexer.has("open_brace") ? {type: "open_brace"} : open_brace), "recur_struct", (lexer.has("close_brace") ? {type: "close_brace"} : close_brace)]},
    {"name": "recur_declare", "symbols": [(lexer.has("comma") ? {type: "comma"} : comma), "parameter_define"]},
    {"name": "recur_struct", "symbols": ["data_type", (lexer.has("id") ? {type: "id"} : id), "parameter_define", (lexer.has("terminator") ? {type: "terminator"} : terminator), "recur_struct"]},
    {"name": "recur_struct", "symbols": []},
    {"name": "struct_define", "symbols": [(lexer.has("id") ? {type: "id"} : id), (lexer.has("id") ? {type: "id"} : id), "parameter_define", (lexer.has("terminator") ? {type: "terminator"} : terminator)]},
    {"name": "assign_struct", "symbols": ["struct_choice", "element"]},
    {"name": "struct_statement", "symbols": [(lexer.has("id") ? {type: "id"} : id), "struct_choice", "element"]},
    {"name": "struct_choice", "symbols": [(lexer.has("open_bracket") ? {type: "open_bracket"} : open_bracket), "array_size", (lexer.has("close_bracket") ? {type: "close_bracket"} : close_bracket), "extra_struct"]},
    {"name": "struct_choice", "symbols": []},
    {"name": "extra_struct", "symbols": [(lexer.has("open_bracket") ? {type: "open_bracket"} : open_bracket), "array_size", (lexer.has("close_bracket") ? {type: "close_bracket"} : close_bracket)]},
    {"name": "extra_struct", "symbols": []},
    {"name": "element_choice", "symbols": [(lexer.has("open_bracket") ? {type: "open_bracket"} : open_bracket), "array_size", (lexer.has("close_bracket") ? {type: "close_bracket"} : close_bracket), "element_option"]},
    {"name": "element_choice", "symbols": []},
    {"name": "element_option", "symbols": [(lexer.has("open_bracket") ? {type: "open_bracket"} : open_bracket), "array_size", (lexer.has("close_bracket") ? {type: "close_bracket"} : close_bracket)]},
    {"name": "element_option", "symbols": []},
    {"name": "element", "symbols": [(lexer.has("dot") ? {type: "dot"} : dot), (lexer.has("id") ? {type: "id"} : id), "element_choice"]},
    {"name": "element", "symbols": []},
    {"name": "recur_define", "symbols": [(lexer.has("comma") ? {type: "comma"} : comma), (lexer.has("id") ? {type: "id"} : id), "parameter_define"]},
    {"name": "recur_define", "symbols": []},
    {"name": "parameter_define", "symbols": ["recur_define"]},
    {"name": "parameter_define", "symbols": ["assign_struct_size"]},
    {"name": "parameter_define", "symbols": []},
    {"name": "function", "symbols": [(lexer.has("task") ? {type: "task"} : task), "function_data_type", (lexer.has("id") ? {type: "id"} : id), (lexer.has("open_paran") ? {type: "open_paran"} : open_paran), "parameter", (lexer.has("close_paran") ? {type: "close_paran"} : close_paran), (lexer.has("open_brace") ? {type: "open_brace"} : open_brace), "function_statement", (lexer.has("close_brace") ? {type: "close_brace"} : close_brace), "function"]},
    {"name": "function", "symbols": ["comment", "function"]},
    {"name": "function", "symbols": []},
    {"name": "array_parameter", "symbols": [(lexer.has("open_bracket") ? {type: "open_bracket"} : open_bracket), (lexer.has("close_bracket") ? {type: "close_bracket"} : close_bracket)]},
    {"name": "array_parameter", "symbols": []},
    {"name": "parameter", "symbols": ["data_type", (lexer.has("id") ? {type: "id"} : id), "array_parameter", "recur_parameter"]},
    {"name": "parameter", "symbols": []},
    {"name": "recur_parameter", "symbols": [(lexer.has("comma") ? {type: "comma"} : comma), "data_type", (lexer.has("id") ? {type: "id"} : id), "array_parameter", "recur_parameter"]},
    {"name": "recur_parameter", "symbols": []},
    {"name": "function_statement", "symbols": [(lexer.has("id") ? {type: "id"} : id), (lexer.has("open_paran") ? {type: "open_paran"} : open_paran), "function_call", (lexer.has("close_paran") ? {type: "close_paran"} : close_paran)]},
    {"name": "function_call", "symbols": ["variable_choice"]},
    {"name": "function_call", "symbols": []},
    {"name": "unary", "symbols": [(lexer.has("unary_oper") ? {type: "unary_oper"} : unary_oper)]},
    {"name": "oper", "symbols": [(lexer.has("arith_oper") ? {type: "arith_oper"} : arith_oper), "array_size", "oper"]},
    {"name": "oper", "symbols": []},
    {"name": "comment", "symbols": [(lexer.has("comment") ? {type: "comment"} : comment)]},
    {"name": "comment", "symbols": []}
]
  , ParserStart: "program"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
